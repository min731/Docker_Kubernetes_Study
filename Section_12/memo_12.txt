# 설치
cmd systeminfo
Hypervisor 확인
#관리자 권한
powershell Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
#관리자 권한
cmd choco install kubernetes-cli
kubectl version --client

kubectl은 클러스터와 통신하기 위한 장치

cd %USERPROFILE%
mkdir .kube
cd .kube
config 파일 생성(확장자 X)

# minikube 설치
https://kubernetes.io/fr/docs/tasks/tools/install-minikube/
choco install minikube
minikube start --driver=hyperv
(docker desktop 실행 후)
(minikube start --driver=docker)

minikube status

# 브라우저로 열기
minikube dashboard

#쿠버네티스의 객체(Object)
Pods : 가장 작은 단위, 컨테이너를 보유, 하나 이상의 컨테이너,
       볼륨과 같은 공유 리소스 보유, 클러스터 내부 Ip가 있음,
       하나의 pod 안에 여러 컨테이너들은 localhost로 통신,
       AWS ECS의 'Task'와 유사,
       pod는 쿠버네티스에 의해 교체되거나 제거될 수 있음,
       
Deployment : Deployment 객체를 생성 후, 생성하고 관리해야 하는 Pod 수와
             컨테이너 수에 대해 지시
             하나 이상의 pod 제어,
             pause, delete, roll back 가능,
             스케일링, 트래픽/CPU 가동률 조건기반 오토스케일링,
             Deployment 객체로 pod 생성 자동화
Services
Volume
...

#명령 방식 vs 선언 방식



# 어플리케이션 쿠버네티스에 배포됌
docker build -t kub-first-app .

# 이미지를 클러스터로 보내기
# Deployment으로 Pod를 실행하고, 컨테이너를 실행
# 클러스터 실행 중인지 확인
minikube status
(kubectl status)

# 로컬 머신에서 쿠버네티스 클러스터로 명령을 보냄
kubectl help
# 새 Deployment 객체 생성(명령형 방식)(자동으로 쿠버네티스 클러스터(master node)로 전송됌)
kubectl create deployment first-app --image=kub-first-app

# 작동 후, deployment 객체 확인, 준비되지 않음
kubectl get deployments
# pods 확인, 준비되지 않음
kubectl get pods
# 이미지가 로컬 머신에만 존재하기 때문, 쿠버네티스 클러스에는 없음
# deployment 일단 삭제, pod도 삭제됌 
kubectl delete deployment first-app

# docker hub에 푸시, Repository 생성, 동일 이미지 생성
docker tag kub-first-app ypd04208625/kub-first-app
docker push ypd04208625/kub-first-app

# docker hub에 push 했으므로 클러스터 머신을 포함해 어디에서나 접근가능
kubectl create deployment first-app --image=ypd04208625/kub-first-app
kubectl get deployments
kubectl get pods
# 확인
kubectl dashboard 

------------------------------------------------------------------------------------ 

# master node의 schedule가 pod에게 적합한 node를 찾음
# worker node는 kubelet으로 pod, container를 관리

# Service 객체(object)는 pod와 pod, 혹은 외부에서 pod를 노출시킴
# Service없이 deployment했을 때 pod의 IP 주소가 있지만,
# 외부에서 엑세스할 수는 없음, 또한 pod가 교체될때마다 바뀜
# Service는 pod를 그룹화하고 공유IP를 제공함,
# 이를 통해 클러스터 내부 뿐만아니라 외부에서도 액세스할 수 있음

# Service 객체 만들기, deployment를 노출(expose)하기
# type=ClusterIP(클러스터 내부에서만 통신)
# type=Nodeport(실행 중인 워커 노드의 IP 노출, 외부와 통신 가능)
# type=LoadBalancer(Service에 고유한 주소 생성, 트래픽 분산)
# --port 컨테이너의 노출 포트(노출할 포트와 함께)
kubectl expose deployment first-app --type=LoadBalancer --port 8080
kubectl get services
# 클러스터 내부 통신이 가능한 CLUSTER-IP는 보이지만, 외부IP는 안보임
# 가상화시켜 구현하고 있기 때문에 EXTERNAL-IP는 없음
# 하지만 minikube에는 Service를 액세스할 수 있게하는 명령어가 있음
minikube service first-app

# 현재 어플리케이션은 /error 시, 서버를 중지하고 있음
# 이를 요청한 뒤, 기다리면 서버가 다시 실행됌
kubectl get pods
# RESTARTS를 보면됌 or minikube dashboard

# 오토 스케일링
kubectl scale deployment/first-app --replicas=3
kubectl get pods
# 하나의 pod가 죽으면, 다른 pod로 분산

# 다른 deployment로 롤백
# 소스 코드 수정
# 새 이미지 생성, 도커 허브 push
kubectl get deployments
# deployment 객체에 새 이미지 주입
# kubectl set image deployment객체 컨테이너명=새이미지명
kubectl set image deployment/first-app kub-first-app=ypd04208625/kub-first-app
# 다시 롤백하고 싶다면?
kubectl rollout status deployment/first-app

# 존재하지 않는 이미지를 주입한다면?
kubectl set image deployment/first-app kub-first-app=ypd04208625/kub-first-app:tmp
kubectl rollout status deployment/first-app
# Waiting for... (dashboard 상에서는 pod에 문제가 생김)
# 새 pod가 실행되기 전에는 이전 pod를 종료하지 않음!
kubectl get pods 
# ImagePullBackOff 중인 pod 존재, 이를 롤백
kubectl rollout undo deployment/first-app
# ImagePullBackOff 중인 pod 제거
# 이전의 deployment 버전 보기
kubectl rollout history deployment/first-app
kubectl rollout history deployment/first-app --revision=3

# 특정 버전의 deployment로 돌아가기(두번째)
kubectl rollout undo deployment/first-app --to-revision=2

# Service 제거
kubectl delete service first-app
# Deployment 제거
------------------------------------------------------------------------------------ 

# docker-compose로 여러 컨테이너마다 docker run 할때 번거로움을 완화했듯이
# 선언적 접근방식으로 명령적(kubectl) 접근방식을 완화시킬 수 있음

# 명령적 접근(Imperative), 선언적 접근(Declarative)
kubectl create deployment , kubectl apply -f config.yaml 

# pods,deployments,services 다 제거
# deployment.yaml 추가
# deployment, service 등을 정의
kubectl apply -f=deployment.yaml
# selector를 지정하지 않아 오류, 선언적 접근은 selector를 지정해야함
# deployment는 selector(matchLabels, matchExpressions)로 제어할 pod를 선택함
# selector 선언 후 
kubectl apply -f=deployment.yaml

# service.yaml 추가
kubectl apply -f=service.yaml
# minikube에 서비스 노출
minikube service backend

# replicas 변경 적용 방법
# deployment.yaml의 replicas 변경 후
kubectl apply -f=deployment.yaml
# 이미지도 동일하게 변경가능

# 명령적 접근으로 deployment delete 가능
# 파일을 삭제하는 것이 아닌 리소스들을 삭제하는 것
kubectl delete -f=deployment.yaml -f=service.yaml
kubectl delete -f=deployment.yaml,service.yaml 

# 여러 yaml 파일들 한번에 적용 및 관리
# service,deployment 모두 선언된 master-deployoment.yaml 작성
# 기존 service, deployment 삭제 이후, master-deployment 적용
kubectl apply -f=master-deployment.yaml
# service, deployment 한번에 적용

# deployment.yaml의 matchLabels vs matchExpressions
# matchExpressions은 operator(연산자) 활용 Label 표현

# selector를 활용하여 delete할 수도 있음
kubectl delete deployments,services -l 키=값(metadatam-labels)

-------------------------------------------------------------------

# pod, container가 정상인지 여부 확인
# deployment3.yaml에 livenessProbe 추가

# imagePullPolicy로 항상 최신 image를 가져오도록 수정 가능
# 같은 태그로 재실행 해도 최신 image로 수정됌
# deployment3.yaml 확인