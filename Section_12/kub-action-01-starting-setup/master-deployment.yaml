apiVersion: v1 
kind: Service
metadata:
  name: backend # Service의 이름
spec:
  selector: # selector는 특정 레이블을 기반으로 리소스를 제공
    app: second-app
    # tier: backend # tier는 다르지만 app은 값은 pod들을 전부 제어할 수 있음
  ports: # 명령적 접근과 같이 port 노출
    - protocol: 'TCP'
      port: 80 # 외부에 노출할 port
      targetPort: 8080 # application의 port
    # 여러 port 노출 가능
    # - protocol: 'TCP'
    #   port: 443
    #   targetPort: 443
  type: LoadBalancer # ClusterIP, NodePort
---
apiVersion: apps/v1
kind: Deployment #Service, Job ...
metadata: # 생성하는 객체의 이름, kubectl create deployment 이름
  name: second-app-deployment
spec: # 
  replicas: 1 # pod 수, 0도 가능
  selector:  # 선언적 접근 방식은 deployment와 일치시킬 selector를 지정해야 작동!
    matchLabels: # deployment가 제어할 pod를 Label들
      app: second-app
      tier: backend
  template: # 사용할 이미지
    metadata: # pod는 또다른 객체이기 때문에 metadata 지정
      labels: 
        app: second-app # app이라는 키와 값 second-app 지정, 사용자가 이름 지정
        tier: backend
    spec: # pod를 구성하는 방법 정의
      containers: #하나의 pod를 구성하는 여러 컨테이너
        - name: second-node # node.js 앱을 의미
          image: ypd04208625/kub-first-app-0716
        # - name: ... 다른 컨테이너도 지정할 수 있음
          # image: ...
