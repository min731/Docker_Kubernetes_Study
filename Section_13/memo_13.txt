# volume
# Persistent Volumes, Persistent Volumes Claims

# node 앱 띄우기
docker-compose up -d --build
docker-compose down
docker-compose up -d --build
# 컨테이너를 삭제했더라도 volume은 살아있음

--------------------------------------------------------

# State : 잃어서는 안되는 데이터, 사용자 데이터들 ...
# 컨테이너 재시작에도 살아있어야함

# 쿠버네티스가 volume을 pod에 탑재할 수 있음(pod template에 추가)
# 'Local Volume'(Node에 저장), 'Cloud provider specific Volume'
# pod가 제거되면 pod안 volume도 제거됌 -> 해결할 방법 있음
# 쿠버네티스 volume은 위치를 완벽히 제어할 수 있음(Docker volume과 다르게)
# 컨테이너가 제거 및 재시작되어도 volume이 유지된다는 점은 k8s,docker 모두 같음

--------------------------------------------------------

# deployment.yaml, service.yaml 작성 후
kubectl apply -f=service.ymal,deployment.yaml
kubectl get deployments
kubectl get services
# service.yaml type을 LoadBalancer로 수정 후 다시 적용
kubectl apply -f=service.yaml
# LoadBalancer 타입으로 수정됌

# 컨테이너의 get,post 요청 가능 확인

--------------------------------------------------------
# 쿠버네티스 볼륨 구현
# 경로를 지정할 수 있으며, 컨테이너 외부에서 작동
# 쿠버네티스 볼륨 유형, 드라이버가 다름
# 쿠버네티스 볼륨은 Pod 안에 있음 
# deployment.yaml의 pod spec에 volume 정의
# app.js 수정(/error), 새 deployment.yaml 적용 (이미지:1 버전)
kublectl apply -f=deployment.yaml

# 컨테이너가 수정되어 다시 시작되면 volume 사라짐
# 볼륨을 pod에 연결!

# deployment.yaml의 pod spec에 volume 정의
# k8s volume 이름/타입 정의, container의 mountPath/이름 정의
kubectl apply -f=deployment.yaml
# 컨테이너가 재시작 되어도 volume이 유지됌

--------------------------------------------------------
# emptyDir + 다수 replicas 경우 , 각 replicas 별로 volume이 다름
# 한 pod가 재시작되는 동안 다른 pod로 요청했을 시 volume이 상이할 수 있음
# hostPath volume으로 해결 가능
# hostPath volume, 경로(/data), DirectoryOrCreate 수정, deployment.yaml 적용
# 여러 pod의 volume을 동기화 시킬 수 있음
# 단 동일한 노드의 pod만 이 데이터에 동기화할 수 있음  

--------------------------------------------------------

# CSI volume(Container Storage Interface)
# Amazon Elcastic File System 과 같은 서비스를 스토리지 솔루션으로 추가할 수 있음

 -------------------------------------------------------

# emptyDir은 Pod간 동기화가 안될 수 있음
# hostPath는 노드간 동기화가 안될 수 있음
# minikube은 단일 워커 노드이기 때문에 hostPath로는 일단 가능
# aws ElcasticBlockStore, AzuerFile, AzuerDisc
# 로 k8s 상의 영구 볼륨을 생성할 수도 있음

# k8s 상에서 Pod의 수명 주기와 분리되는 Persistent volume이 있음
# 노드에 독립적임
# 클러스터 안에 노드들과는 분리된 PV(Persistent Volume)이 존재(리소스 할당)
# 각 노드안에 PV Claim (Persistent Volume Claim)을 정의하여 PV에 액세스
# 각 노드는 여러 PV에 액세스 할 수 있음
# host-pv.yaml 작성

# 이후 PV를 사용할 수 있는 PV Claim 작성
# host-pvc.yaml를 작성하고 Pod에 적용하기 위해 deployment2.yaml 로 작성

# default Storage Class 확인
# 해당 default SC(Storage Class)를 사용할 것임
kubectl get sc 
# host-pv.yaml, host-pvc.yaml에 storageClassName 추가
kubectl apply -f=host-pv.yaml,host-pvc.yaml,deployment2.yaml
kubectl get pv
kubectl get pvc
kubectl get deployments

# postman 요청으로 확인
# 단일 워커 노드이기 때문에 hostPath와 PV는 동일하지만
# 이는 클러스터 상의 PV가 구현된 것임

--------------------------------------------------

# 쿠버네티스 환경변수
# app.js의 volume 경로에 process.env.STORY_FOLDER 변수 추가
# deployment2.yaml 파일에 env 명시
# app.js를 수정했으므로 image 재제작
# :2 로 build, push
kubectl apply -f=deployment2.yaml

# 다른 deployment도 동일한 환경변수를 사용할 수 있게 통합
# emvironment.yaml 작성(꼭 이러한 이름이 아니여도 됌)
# kind는 ConfigMap
# environment.yaml 작성, deployment3.yaml에 적용
kubectl apply -f=environment.yaml,deployment3.yaml