# 어플리케이션 컨테이너 = 환경 + 소스코드 
docker run myapp

# 유틸리티 컨테이너 = 환경
docker run mynpm init
# package.json과 같은 파일만들기

# -it : 컨테이너를 실행하면서 터미널 실행
docker run -it -d node

# 실행 중인 컨테이너 내에서 터미널 실행
# 노드 프로젝트 시작
# exec 컨테이너 내부의 작성된 로그 파일을 읽을 수 있음
docker exec -it romantic_blackwell npm init
Ctrl+C

# 컨테이너 실행 후 터미널에 npm init(프로젝트 생성)
docker run -it node npm init
# 이 과정을 Dockerfile로 자동화

dockr build -t node-util .
# 바인드 마운트로 프로젝트를 생성, package.json 파일 로컬 호스트 머신에 불러옴
docker run -it -v C:/LJM/Docker_Kubernetes_Study/Section_7/:/app node-util npm init 
# 라이브러리  설치 및 바인드 마운트, 로컬 호스트 머신에서 삭제할 수 있는 것을 방지
docker run -it -v C:/LJM/Docker_Kubernetes_Study/Section_7/:/app node-util npm install

# docker run -it -v C:/LJM/Docker_Kubernetes_Study/Section_7/:/app node-util npm install
# 위 명령어 이미지명 뒤의 내용들이
ENTRYPOINT ["npm"]
# 로 실행됌


# ENTRYPOINT ["npm"] 지정 후
# 컨테이너 실행 시, init 
docker run -it -v C:/LJM/Docker_Kubernetes_Study/Section_7:/app mynpm init
# 위를 통해 새 프로젝트를 생성하고, package.json을 로컬 호스트머신에 저장
# 위 package.json 파일을 /app에 공유

# ENTRYPOINT ["npm"] 지정 후
# 컨테이너 실행 시, install 붙히기
docker run -it -v C:/LJM/Docker_Kubernetes_Study/Section_7:/app mynpm install
# package.json을 로컬 호스트머신에 저장
# 위 package.json 파일을 /app에 공유하고 install

# 컨테이너의 install된 사항(package.json)을 바인드 마운트로 로컬 폴더에 저장
docker run -it -v C:/LJM/Docker_Kubernetes_Study/Section_7:/app mynpm install express --save

# docker-compose를 통해 명령어 줄이기
docker-compose run 서비스명(npm) init(혹은 install)

# docker-compose up, 컨테이너 실행
# docker-compose down, 컨테이너 종료/제거

# docker-compose run --rm npm init, 명령 완료 후 제거
# 로컬 호스트에 package.json을 남기고 컨테이너 종료/제거
