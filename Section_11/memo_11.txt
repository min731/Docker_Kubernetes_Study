#쿠버네티스
컨테이너 오케스트레이션, 대규모 배포
1) 컨테이너 배포, 복구
2) 트래픽 분산
3) 스케일링

# AWS ECS
config 파일의 형식이 다름
클라우드 서비스마다 형식이 다름
쿠버네티스가 배포 표준화 방식임

쿠버네티스는 클라우드 프로바이더가 아닌 자체 머신에서 실행 가능
다중 머신에서도 실행 가능 

파드는 쿠버네티스에서 가장 작은 단위
worker node에서 파드를 실행
worker node는 EC2 인스턴스라고 보면됌
worker node안의 Proxy/Config가 네트워크 접근, 트래픽을 제어
다수 worker node를 실행할 수 있음
트래픽 증감에 따라 worker node로 파드가 배포됌

master node의 control plane에 의해 포드 생성, 교체, 종료함
master node는 worker node와 독립적임
master node와 worker node가 클러스터를 형성함
master node가 Cloud Provider API에 리소스(로드 밸런서, 네트워크)요청 및 생성

클러스터, master/worker node 생성
모든 머신에  쿠버네티스 설치(API SERVER, kubelet...)
로드 밸런서 추가 등

docker run대신 docker-compose 처럼 쿠버네티스로 컨테이너를 시작함

파드는 master node에 의해 관리됌ㅡ 파드 생성 삭제
여러 컨테이너 있는 파드에 볼륨도 추가할 수 있음

<worker node>
docker : 컨테이너를 생성하고 실행하기 위함
kubelet : master node와 통신
kube-proxy :  들어오고 나가는 트래픽 접근 관리

<master node>
API SERVER : kubelet과 통신
Scheduler : 새 파드를 worker node에 배치함
Controller-Manager : worker node 감시, 적당한 파드 배치 관리
Cloud-Controller-Manager : AWS, Azure

# 용어
클래스터 : node machine, master node, worker node 등 최종 상태
노드 : 여러개 포드를 호스팅, 클러스터와 통신, 가상 머신
파드 : 컨테이너를 실행(docker run)
서비스 : 논리적 세트, 독립적인 IP 주소를 갖는 포드 그룹